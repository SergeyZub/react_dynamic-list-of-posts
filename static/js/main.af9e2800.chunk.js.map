{"version":3,"sources":["api/api.js","api/posts.js","components/PostsList/PostsList.jsx","components/Loader/Loader.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","api/users.js","index.js"],"names":["BASE_URL","get","url","fetch","then","response","json","result","data","getPosts","PostsList","posts","activePost","getActivePost","className","map","post","key","id","userId","title","type","onClick","Loader","getPostComments","postId","comments","filter","comment","undefined","addComment","method","body","JSON","stringify","headers","add","deleteComment","commentId","NewCommentForm","addNewComment","useState","name","getName","email","getEmail","getBody","onSubmit","event","preventDefault","placeholder","value","onChange","target","required","PostDetails","selectedPostId","setComments","selectedPost","setSelectedPost","showComments","setShowComments","loading","setLoading","useEffect","loadComments","length","App","setPost","users","setUsers","selectedUserId","setUserId","getSelectedPostId","getUsersPosts","sort","a","b","user","ReactDOM","render","document","getElementById"],"mappings":"qVAAaA,EAAW,iCAEXC,EAAM,SAAAC,GAAG,OAAIC,MAAM,GAAD,OAAIH,GAAJ,OAAeE,IAC3CE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIA,EAAOC,SCFZC,EAAW,kBAAMR,EAAI,WCGrBS,G,KAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,WAAYC,EAAtB,EAAsBA,cAAtB,OACvB,yBAAKC,UAAU,aACb,sCAEA,wBAAIA,UAAU,mBACXH,EAAMI,KAAI,SAAAC,GAAI,OACb,wBAAIF,UAAU,kBAAkBG,IAAKD,EAAKE,IACxC,6BACE,4CAAcF,EAAKG,OAAnB,QACCH,EAAKI,OAGPR,IAAeI,EAAKE,GACnB,4BACEG,KAAK,SACLP,UAAU,0CACVQ,QAAS,kBAAMT,EAAc,KAH/B,SAQA,4BACEQ,KAAK,SACLP,UAAU,2BACVQ,QAAS,kBAAMT,EAAcG,EAAKE,MAHpC,gBCvBCK,G,MAAS,kBACpB,yBAAKT,UAAU,UACb,yBAAKA,UAAU,uBCDNU,EAAkB,SAAAC,GAAM,OAFXxB,EAAI,aAG3BG,MAAK,SAACG,GACL,IAAMmB,EAAWnB,EAAOoB,QAAO,SAAAC,GAAO,OAAIA,EAAQH,SAAWA,KAE7D,YAAiBI,IAAbH,EACK,GAGFA,MAGEI,EAAa,SAAAtB,GAAI,OJTX,SAACN,EAAKM,GAAN,OAAeL,MAAM,GAAD,OAAIH,GAAJ,OAAeE,GAAO,CAC3D6B,OAAQ,OACRC,KAAMC,KAAKC,UAAU1B,GACrB2B,QAAS,CACP,eAAgB,qCAGjB/B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIA,EAAOC,QICS4B,CAAI,YAAa5B,IAEtC6B,EAAgB,SAAAC,GAAS,OJDjBpC,EIC0B,YJDrBgB,EICkCoB,EJD3BnC,MAAM,GAAD,OAAIH,GAAJ,OAAeE,EAAf,YAAsBgB,GAAM,CAChEa,OAAQ,WAEP3B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIA,EAAOC,QAJL,IAACN,EAAKgB,GKXbqB,G,MAAiB,SAAC,GAA+B,IAA7Bd,EAA4B,EAA5BA,OAAQe,EAAoB,EAApBA,cACvC,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOT,EAAP,KAAac,EAAb,KAiBA,OACE,0BAAMhC,UAAU,iBAAiBiC,SAhBlB,SAACC,GAChBA,EAAMC,iBAQNT,EAPa,CACXE,OACAE,QACAZ,OACAP,WAIFkB,EAAQ,IACRE,EAAS,IACTC,EAAQ,MAKN,yBAAKhC,UAAU,cACb,2BACEO,KAAK,OACLqB,KAAK,OACLQ,YAAY,YACZpC,UAAU,wBACVqC,MAAOT,EACPU,SAAU,SAAAJ,GAAK,OAAIL,EAAQK,EAAMK,OAAOF,QACxCG,UAAQ,KAIZ,yBAAKxC,UAAU,cACb,2BACEO,KAAK,QACLqB,KAAK,QACLQ,YAAY,aACZpC,UAAU,wBACVqC,MAAOP,EACPQ,SAAU,SAAAJ,GAAK,OAAIH,EAASG,EAAMK,OAAOF,QACzCG,UAAQ,KAIZ,yBAAKxC,UAAU,cACb,8BACE4B,KAAK,OACLQ,YAAY,oBACZpC,UAAU,wBACVqC,MAAOnB,EACPoB,SAAU,SAAAJ,GAAK,OAAIF,EAAQE,EAAMK,OAAOF,QACxCG,UAAQ,KAIZ,4BACEjC,KAAK,SACLP,UAAU,wCAFZ,oBCpDOyC,G,MAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAC5B,EAAgCf,mBAAS,IAAzC,mBAAOf,EAAP,KAAiB+B,EAAjB,KACA,EAAwChB,mBAAS,IAAjD,mBAAOiB,EAAP,KAAqBC,EAArB,KACA,EAAwClB,oBAAS,GAAjD,mBAAOmB,EAAP,KAAqBC,EAArB,KACA,EAA8BpB,oBAAS,GAAvC,mBAAOqB,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WLVkB,IAAAvC,KKWX+B,ELXqBvD,EAAI,UAAD,OAAWwB,KKWnBrB,KAAKuD,KACnC,CAACH,IAEJ,IAAMS,EAAe,WACnBzC,GAAiBgC,GACdpD,KAAKqD,IAGVO,qBAAU,WACRC,MACC,CAACT,IAaJ,OACE,yBAAK1C,UAAU,eACb,6CAEA,6BAASA,UAAU,qBACjB,2BAAI4C,EAAa1B,OAGnB,6BAASlB,UAAU,yBAChB8C,EACC,oCACE,4BACEvC,KAAK,SACLP,UAAU,SACVQ,QAAS,kBAAMuC,GAAgB,KAHjC,eAKWnC,EAASwC,OALpB,cAQqB,IAApBxC,EAASwC,OACR,yBAAKpD,UAAU,6BAAf,uBAIA,wBAAIA,UAAU,qBACXY,EAASX,KAAI,SAAAa,GAAO,OACnB,wBAAId,UAAU,yBAAyBG,IAAKW,EAAQV,IAClD,4BACEG,KAAK,SACLP,UAAU,oCACVQ,QAAS,kBApCFgB,EAoC0BV,EAAQV,GAnC3D6C,GAAW,QACX1B,EAAcC,GACXlC,KAAK6D,GAHgB,IAAC3B,IAsCNwB,EAAU,kBAAC,EAAD,MAAa,KAG1B,2BAAIlC,EAAQI,YAOtB,4BACEX,KAAK,SACLP,UAAU,SACVQ,QAAS,kBAAMuC,GAAgB,KAHjC,eAKWnC,EAASwC,OALpB,eAUJ,iCACE,yBAAKpD,UAAU,6BACb,kBAAC,EAAD,CACEW,OAAQ+B,EACRhB,cAnEY,SAAChC,GACrBsB,EAAWtB,GACRJ,KAAK6D,WC6CGE,G,YAhEH,WACV,MAAyB1B,mBAAS,IAAlC,mBAAO9B,EAAP,KAAcyD,EAAd,KACA,EAA0B3B,mBAAS,IAAnC,mBAAO4B,EAAP,KAAcC,EAAd,KACA,EAAoC7B,mBAAS,GAA7C,mBAAO8B,EAAP,KAAuBC,EAAvB,KACA,EAA4C/B,mBAAS,GAArD,mBAAOe,EAAP,KAAuBiB,EAAvB,KAkBA,OAhBAT,qBAAU,WACgB,KAAnBO,GACH9D,IAAWL,KAAKgE,GAChBK,EAAkB,KNlBK,SAAAF,GAAc,OAAI9D,IAC5CL,MAAK,SAAAO,GAAK,OAAIA,EAAMgB,QAAO,SAAAX,GAAI,OAAIA,EAAKG,UAAYoD,QMmBjDG,CAAcH,GAAgBnE,KAAKgE,GACnCK,EAAkB,MAEnB,CAACF,IAEJP,qBAAU,WC1BkB/D,EAAI,UD4B3BG,MAAK,SAAAG,GAAM,OAAIA,EAAOoE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE1D,GAAK2D,EAAE3D,SAC9Cd,KAAKkE,KACP,IAGD,yBAAKxD,UAAU,OACb,4BAAQA,UAAU,eAChB,qDAGE,4BACEA,UAAU,qBACVsC,SAAU,SAAAJ,GAAK,OAAIwB,EAAUxB,EAAMK,OAAOF,SAE1C,4BAAQA,MAAM,KAAd,iBACCkB,EAAMtD,KAAI,SAAA+D,GAAI,OACb,4BACE7D,IAAK6D,EAAK5D,GACViC,MAAO2B,EAAK5D,IAEX4D,EAAKpC,YAOhB,0BAAM5B,UAAU,aACd,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEH,MAAOA,EACPC,WAAY4C,EACZ3C,cAAe4D,KAInB,yBAAK3D,UAAU,gBACS,KAAnB0C,IAA0BA,EAEzB,kBAAC,EAAD,CAAaA,eAAgBA,IAD7B,kBAAC,EAAD,YE/DduB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.af9e2800.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const get = url => fetch(`${BASE_URL}${url}`)\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const add = (url, data) => fetch(`${BASE_URL}${url}`, {\n  method: 'POST',\n  body: JSON.stringify(data),\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n})\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const dell = (url, id) => fetch(`${BASE_URL}${url}/${id}`, {\n  method: 'DELETE',\n})\n  .then(response => response.json())\n  .then(result => result.data);\n","import { get } from './api';\n\nexport const getPosts = () => get('/posts');\nexport const getUsersPosts = selectedUserId => getPosts()\n  .then(posts => posts.filter(post => post.userId === +selectedUserId));\n\nexport const getPostDetails = postId => get(`/posts/${postId}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PostsList.scss';\n\nexport const PostsList = ({ posts, activePost, getActivePost }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li className=\"PostsList__item\" key={post.id}>\n          <div>\n            <b>{`[User #${post.userId}]: `}</b>\n            {post.title}\n          </div>\n\n          {activePost === post.id ? (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button button__select\"\n              onClick={() => getActivePost(0)}\n            >\n              Close\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => getActivePost(post.id)}\n            >\n              Open\n            </button>\n          )}\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape).isRequired,\n  activePost: PropTypes.number.isRequired,\n  getActivePost: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { add, dell, get } from './api';\n\nconst getComments = () => get('/comments');\n\nexport const getPostComments = postId => getComments()\n  .then((result) => {\n    const comments = result.filter(comment => comment.postId === postId);\n\n    if (comments === undefined) {\n      return [];\n    }\n\n    return comments;\n  });\n\nexport const addComment = data => add('/comments', data);\n\nexport const deleteComment = commentId => dell('/comments', commentId);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, addNewComment }) => {\n  const [name, getName] = useState('');\n  const [email, getEmail] = useState('');\n  const [body, getBody] = useState('');\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    const data = {\n      name,\n      email,\n      body,\n      postId,\n    };\n\n    addNewComment(data);\n    getName('');\n    getEmail('');\n    getBody('');\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={onSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => getName(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => getEmail(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={event => getBody(event.target.value)}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  addNewComment: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { addComment, deleteComment, getPostComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader';\n\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [comments, setComments] = useState([]);\n  const [selectedPost, setSelectedPost] = useState([]);\n  const [showComments, setShowComments] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId).then(setSelectedPost);\n  }, [selectedPostId]);\n\n  const loadComments = () => {\n    getPostComments(+selectedPostId)\n      .then(setComments);\n  };\n\n  useEffect(() => {\n    loadComments();\n  }, [selectedPostId]);\n\n  const addNewComment = (data) => {\n    addComment(data)\n      .then(loadComments);\n  };\n\n  const deleteCommentById = (commentId) => {\n    setLoading(true);\n    deleteComment(commentId)\n      .then(loadComments);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{selectedPost.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {showComments ? (\n          <>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setShowComments(false)}\n            >\n              {`Hide ${comments.length} comments`}\n            </button>\n\n            {comments.length === 0 ? (\n              <div className=\"PostDetails__add-comments\">\n                Add a first comment\n              </div>\n            ) : (\n              <ul className=\"PostDetails__list\">\n                {comments.map(comment => (\n                  <li className=\"PostDetails__list-item\" key={comment.id}>\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => deleteCommentById(comment.id)}\n                    >\n                      {loading ? <Loader /> : 'X'}\n                    </button>\n\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </>\n        ) : (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setShowComments(true)}\n          >\n            {`Show ${comments.length} comments`}\n          </button>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={selectedPostId}\n            addNewComment={addNewComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { getUsers } from './api/users';\nimport { getPosts, getUsersPosts } from './api/posts';\n\nimport { PostsList } from './components/PostsList';\nimport { Loader } from './components/Loader';\nimport { PostDetails } from './components/PostDetails';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App = () => {\n  const [posts, setPost] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [selectedUserId, setUserId] = useState(0);\n  const [selectedPostId, getSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    if (+selectedUserId === 0) {\n      getPosts().then(setPost);\n      getSelectedPostId(0);\n    } else {\n      getUsersPosts(selectedUserId).then(setPost);\n      getSelectedPostId(0);\n    }\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    getUsers()\n      .then(result => result.sort((a, b) => a.id - b.id))\n      .then(setUsers);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={event => setUserId(event.target.value)}\n          >\n            <option value=\"0\">Select a user</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            activePost={selectedPostId}\n            getActivePost={getSelectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          { +selectedPostId !== 0 && (!selectedPostId\n            ? <Loader />\n            : <PostDetails selectedPostId={selectedPostId} />)}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { get } from './api';\n\nexport const getUsers = () => get('/users');\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}